import GameplayKit

struct SeededGenerator: RandomNumberGenerator {
  let seed: UInt64
  private let generator: GKMersenneTwisterRandomSource
  init(seed: UInt64) {
    self.seed = seed
    generator = GKMersenneTwisterRandomSource(seed: seed)
  }

  mutating func next() -> UInt64 {
    let next1 = UInt64(bitPattern: Int64(generator.nextInt()))
    let next2 = UInt64(bitPattern: Int64(generator.nextInt()))
    return next1 ^ (next2 << 32)
  }
}

struct Dish: Hashable, CustomStringConvertible {
  enum Meal: Hashable { case breakfast, dinner, supper }
  enum Kind: Hashable { case soup, main, porridge, salad }
  enum Ingredient: String, Hashable, CustomStringConvertible, Comparable {
    case spud = "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å"
    case tomato = "–ø–æ–º–∏–¥–æ—Ä—ã"
    case chicken = "–∫—É—Ä–∏—Ü–∞"
    case pork = "—Å–≤–∏–Ω–∏–Ω–∞"
    case rice = "—Ä–∏—Å"
    case milk = "–º–æ–ª–æ–∫–æ"
    case coconutMilk = "–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ"
    case grecha = "–≥—Ä–µ—á–∞"
    case egg = "—è–π—Ü–æ"
    case cottageCheese = "—Ç–≤–æ—Ä–æ–≥"
    case oatmeal = "–æ–≤—Å—è–Ω–∫–∞"
    case avocado = "–∞–≤–æ–∫–∞–¥–æ"
    case nuts = "–æ—Ä–µ—Ö–∏"
    case flour = "–º—É–∫–∞"
    case beans = "—Ñ–∞—Å–æ–ª—å"
    case cannedBeans = "—Ñ–∞—Å–æ–ª—å –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞—è"
    case kefir = "–∫–µ—Ñ–∏—Ä"
    case bacon = "–±–µ–∫–æ–Ω"
    case salmon = "–ª–æ—Å–æ—Å—å"
    case creamcheese = "–∫—Ä–µ–º-—Å—ã—Ä"
    case vinegar = "—É–∫—Å—É—Å"
    case bread = "—Ö–ª–µ–±"
    case celery = "—Å–µ–ª—å–¥–µ—Ä–µ–π"
    case mushrooms = "–≥—Ä–∏–±—ã"
    case peas = "–≥–æ—Ä–æ—Ö"
    case smockedRibs = "–∫–æ–ø—á—ë–Ω—ã–µ —Ä—ë–±—Ä—ã—à–∫–∏"
    case squash = "–∫–∞–±–∞—á–æ–∫"
    case turkey = "–∏–Ω–¥–µ–π–∫–∞"
    case onion = "–ª—É–∫"
    case dill = "—É–∫—Ä–æ–ø"
    case pasta = "–º–∞–∫–∞—Ä–æ–Ω—ã"
    case carrot = "–º–æ—Ä–∫–æ–≤–∫–∞"
    case mayonnaise = "–º–∞–π–æ–Ω–µ–∑"
    case soy = "—Å–æ–µ–≤—ã–π —Å–æ—É—Å"
    case paprika = "–ø–∞–ø—Ä–∏–∫–∞ (—Å–ø–µ—Ü–∏—è)"
    case pesto = "–ø–µ—Å—Ç–æ"
    case pineNut = "–∫–µ–¥—Ä–æ–≤—ã–µ –æ—Ä–µ—à–∫–∏"
    case hummus = "—Ö—É–º—É—Å"
    case cucumber = "–æ–≥—É—Ä–µ—Ü"
    case garganzola = "–≥–∞—Ä–≥–∞–Ω–∑–æ–ª–∞"
    case cream = "—Å–ª–∏–≤–∫–∏"
    case pita = "–ª–∞–≤–∞—à"
    case shrimp = "–∫—Ä–µ–≤–µ—Ç–∫–∏"
    case redCabbage = "–∫—Ä–∞—Å–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞"
    case green = "–∑–µ–ª–µ–Ω—å"
    case pickles = "–º–∞—Ä–∏–Ω–æ–≤–∞–Ω—ã–µ –æ–≥—É—Ä—á–∏–∫–∏"
    case sausage = "–∫–æ–ª–±–∞—Å–∞"
    case rusk = "—Å—É—Ö–∞—Ä–∏–∫–∏"
    case havaiiMix = "–≥–∞–≤–∞–π—Å–∫–∞—è —Å–º–µ—Å—å"
    case pelmeni = "–ø–µ–ª—å–º–µ–Ω–∏"
    case stake = "—Å—Ç–µ–π–∫"
    case butter = "—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ"
    case lemon = "–ª–∏–º–æ–Ω"
    case ginger = "–∏–º–±–∏—Ä—å"
    case sweetRedPepper = "—Å–ª–∞–¥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ü"
    case eggplant = "–±–∞–∫–ª–∞–∂–∞–Ω"
    case garlic = "—á–µ—Å–Ω–æ–∫"
    case cauliflower = "—Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞"
    case dijonMustard = "–¥–∏–∂–æ–Ω—Å–∫–∞—è –≥–æ—Ä—á–∏—Ü–∞"
    case cheese = "—Å—ã—Ä"
    case spinach = "—à–ø–∏–Ω–∞—Ç"
    case sourCream = "—Å–º–µ—Ç–∞–Ω–∞"
    case millet = "–ø—à–µ–Ω–æ"
    case mozzarella = "–º–æ—Ü–∞—Ä–µ–ª–ª–∞"
    case pumpkin = "—Ç—ã–∫–≤–∞"
    case cellophaneNoodles = "—Ñ—É–Ω—á–æ–∑–∞"
    case cranberry = "–±—Ä—É—Å–Ω–∏–∫–∞"

    var isVegetarian: Bool {
      switch self {
      case .spud,
           .tomato,
           .rice,
           .milk,
           .coconutMilk,
           .grecha,
           .egg,
           .cottageCheese,
           .oatmeal,
           .avocado,
           .nuts,
           .flour,
           .beans,
           .cannedBeans,
           .kefir,
           .creamcheese,
           .vinegar,
           .bread,
           .celery,
           .mushrooms,
           .peas,
           .squash,
           .onion,
           .dill,
           .pasta,
           .carrot,
           .mayonnaise,
           .soy,
           .paprika,
           .pesto,
           .pineNut,
           .hummus,
           .cucumber,
           .garganzola,
           .cream,
           .pita,
           .shrimp,
           .redCabbage,
           .green,
           .pickles,
           .sausage,
           .rusk,
           .butter,
           .lemon,
           .ginger,
           .sweetRedPepper,
           .eggplant,
           .garlic,
           .cauliflower,
           .dijonMustard,
           .cheese,
           .spinach,
           .sourCream,
           .millet,
           .mozzarella,
           .cellophaneNoodles,
           .cranberry,
           .pumpkin,
           .havaiiMix:
        return true
      case .chicken,
           .pork,
           .stake,
           .pelmeni,
           .bacon,
           .turkey,
           .salmon,
           .smockedRibs:
        return false
      }
    }

    var emoji: String? {
      switch self {
      case .spud: return "ü•î"
      case .tomato: return "üçÖ"
      case .chicken: return "üêî"
      case .pork: return "üê∑"
      case .rice: return "üçö"
      case .milk, .kefir: return "ü•õ"
      case .coconutMilk: return "ü••"
      case .egg: return "ü•ö"
      case .avocado: return "ü•ë"
      case .nuts: return "ü•ú"
      case .flour: return "üåæ"
      case .bacon: return "ü•ì"
      case .salmon: return "üêü"
      case .bread: return "üçû"
      case .celery: return nil
      case .mushrooms: return "üçÑ"
      case .turkey: return "ü¶É"
      case .onion: return "üßÖ"
      case .carrot: return "ü•ï"
      case .paprika: return "üå∂"
      case .cucumber, .pickles: return "ü•í"
      case .shrimp: return "üç§"
      case .green: return "üåø"
      case .pelmeni: return "ü•ü"
      case .stake: return "ü•©"
      case .cheese: return "üßÄ"
      case .butter: return "üßà"
      case .lemon: return "üçã"
      case .garlic: return "üßÑ"
      case .eggplant: return "üçÜ"
      case .cauliflower: return "ü•¶"
      case .grecha,
           .cottageCheese,
           .oatmeal,
           .beans,
           .cannedBeans,
           .creamcheese,
           .vinegar,
           .peas,
           .smockedRibs,
           .squash,
           .dill,
           .pasta,
           .mayonnaise,
           .soy,
           .pesto,
           .pineNut,
           .hummus,
           .cream,
           .pita,
           .redCabbage,
           .sausage,
           .rusk,
           .ginger,
           .sweetRedPepper,
           .garganzola,
           .dijonMustard,
           .spinach,
           .sourCream,
           .millet,
           .mozzarella,
           .cellophaneNoodles,
           .cranberry,
           .pumpkin,
           .havaiiMix:
        return nil
      }
    }

    var description: String {
      rawValue + (emoji ?? "")
    }

    static func < (lhs: Dish.Ingredient, rhs: Dish.Ingredient) -> Bool {
      lhs.rawValue < rhs.rawValue
    }
  }

  enum Unit: String, Comparable, CustomStringConvertible {
    case p = "—à—Ç"

    var description: String { rawValue }

    static func < (lhs: Dish.Unit, rhs: Dish.Unit) -> Bool {
      lhs.rawValue < rhs.rawValue
    }
  }

  struct Value: Hashable, CustomStringConvertible, Comparable {
    let quantity: UInt
    let unit: Unit

    var description: String { "\(quantity) \(unit)" }

    static func < (lhs: Dish.Value, rhs: Dish.Value) -> Bool {
      guard lhs.unit == rhs.unit else {
        return false
      }
      return lhs.unit < rhs.unit
    }

    static let one = Self(quantity: 1, unit: .p)
  }

  struct Item: Hashable, CustomStringConvertible, Comparable {
    let ingredient: Ingredient
    let value: Value

    var description: String { "\(ingredient) (\(value))" }

    static func < (lhs: Dish.Item, rhs: Dish.Item) -> Bool {
      if lhs.ingredient < rhs.ingredient {
        return true
      }
      if lhs.ingredient > rhs.ingredient  {
        return false
      }
      return lhs.value < rhs.value
    }
  }

  let name: String
  let meals: Set<Meal>
  let kind: Kind?
  let items: Set<Item>

  init(name: String, meals: Set<Dish.Meal>, kind: Dish.Kind?, ingredients: Set<Dish.Ingredient>) {
    self.name = name
    self.meals = meals
    self.kind = kind
    self.items = Set(ingredients.map { Dish.Item(ingredient: $0, value: .one) })
  }

  var ingredients: Set<Ingredient> {
    Set(items.map { $0.ingredient })
  }

  var isVegetarian: Bool {
    ingredients.filter { !$0.isVegetarian }.isEmpty
  }

  var description: String {
    let ingredientsList = ingredients.map { "\($0)" }.joined(separator: ", ")
    return "\(name) (\(ingredientsList))"
  }
}

let favoritesDishes = [
  Dish(name: "—Ä–∏—Å–æ–≤–∞—è –∫–∞—à–∞", meals: [.breakfast], kind: .porridge, ingredients: [.rice, .coconutMilk]),
  Dish(name: "–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞", meals: [.breakfast], kind: .porridge, ingredients: [.grecha, .coconutMilk]),
  Dish(name: "–ø—à–µ–Ω–Ω–∞—è –∫–∞—à–∞", meals: [.breakfast], kind: .porridge, ingredients: [.millet, .coconutMilk]),
  Dish(name: "—Å—ã—Ä–Ω–∏–∫–∏", meals: [.breakfast], kind: .none, ingredients: [.cottageCheese, .egg, .flour]),
  Dish(name: "–≥—Ä–∞–Ω–æ–ª–∞", meals: [.breakfast], kind: .none, ingredients: [.oatmeal, .nuts]),
  Dish(name: "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", meals: [.breakfast], kind: .none, ingredients: [.egg, .bacon, .cannedBeans, .tomato]),
  Dish(name: "–∞–≤–æ–∫–∞–¥–æ —Ç–æ—Å—Ç", meals: [.breakfast], kind: .none, ingredients: [.avocado, .egg, .bread, .salmon, .creamcheese]),
  Dish(name: "–æ–ª–∞–¥—É—à–∫–∏", meals: [.breakfast], kind: .none, ingredients: [.kefir, .flour, .vinegar]),
  Dish(name: "–∫–∞–ø—Ä–µ–∑–µ —Å —Å–æ—É—Å–æ–º –ø–µ—Å—Ç–æ", meals: [.breakfast], kind: .none, ingredients: [.mozzarella, .lemon, .garlic, .green, .pesto]),

  Dish(name: "–≥—Ä–∏–±–Ω–æ–π —Å—É–ø", meals: [.dinner], kind: .soup, ingredients: [.milk, .mushrooms, .onion, .spud, .carrot]),
  Dish(name: "–≥–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø", meals: [.dinner], kind: .soup, ingredients: [.peas, .smockedRibs, .onion, .spud, .carrot]),
  Dish(name: "—Ä—ã–±–Ω—ã–π —Å—É–ø", meals: [.dinner], kind: .soup, ingredients: [.salmon, .onion, .spud, .carrot]),
  Dish(name: "–∫—É—Ä–∏–Ω—ã–π —Å—É–ø", meals: [.dinner], kind: .soup, ingredients: [.chicken, .pasta, .onion, .spud, .carrot]),
  Dish(name: "—Å—É–ø –∏–∑ –∏–Ω–¥–µ–π–∫–∏", meals: [.dinner], kind: .soup, ingredients: [.turkey, .squash, .dill, .onion, .spud, .carrot]),
  Dish(name: "–æ–≤–æ—â–Ω–æ–π —Å—É–ø", meals: [.dinner], kind: .soup, ingredients: [.beans, .celery, .tomato, .onion, .spud, .carrot]),
  Dish(name: "–≥—Ä–µ—á–∞ —Å –≥—Ä–∏–±–∞–º–∏", meals: [.dinner], kind: .main, ingredients: [.grecha, .mushrooms]),
  Dish(name: "–±–æ—É–ª —Å —Ä–∏—Å–æ–º", meals: [.dinner], kind: .main, ingredients: [.rice]),
  Dish(name: "–º—è—Å–æ –ø–æ-—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏", meals: [.dinner], kind: .main, ingredients: [.pork, .carrot, .onion, .spud, .mayonnaise]),
  Dish(name: "–º—è—Å–æ –∑–∞–ø–µ—á—ë–Ω–Ω–æ–µ", meals: [.dinner], kind: .main, ingredients: [.pork]),
  Dish(name: "–∏–Ω–¥–µ–π–∫–∞ –≤ —Å–æ–µ–≤–æ–º —Å–æ—É—Å–µ", meals: [.dinner], kind: .main, ingredients: [.turkey, .soy]),
  Dish(name: "–∫–∞—Ä—Ç–æ—à–∫–∞ –∑–∞–ø–µ—á–µ–Ω–æ-–≤–∞—Ä–µ–Ω–∞—è", meals: [.dinner], kind: .main, ingredients: [.spud, .paprika]),
  Dish(name: "–º–∞–∫–∞—Ä–æ–Ω—ã —Å —è–π—Ü–æ–º", meals: [.dinner], kind: .main, ingredients: [.pasta, .egg, .tomato]),
  Dish(name: "–º–∞–∫–∞—Ä–æ–Ω—ã —Å –ø–µ—Å—Ç–æ", meals: [.dinner], kind: .main, ingredients: [.pasta, .pesto]),
  Dish(name: "–ø–∞—Å—Ç–∞ —Å –∫–µ–¥—Ä–æ–≤—ã–º–∏ –æ—Ä–µ—Ö–∞–º–∏", meals: [.dinner], kind: .main, ingredients: [.pasta, .pineNut, .pork, .garganzola, .cream]),
  Dish(name: "–∫–∞—Ä—Ç–æ—à–∫–∞ –∑–∞–ø–µ—á–µ–Ω–æ-–≤–∞—Ä–µ–Ω–∞—è", meals: [.dinner], kind: .main, ingredients: [.spud, .paprika]),
  Dish(name: "—à–∞–≤–µ—Ä–º–∞", meals: [.dinner], kind: .main, ingredients: [.pita, .pork, .hummus, .redCabbage, .tomato, .cucumber, .pickles]),
  Dish(name: "–∑–∞–ø–µ—á—ë–Ω–Ω–∞—è –∫–ª—É–Ω—å–∫–∞", meals: [.dinner], kind: .main, ingredients: [.chicken]),

  Dish(name: "—Å–∞–ª–∞—Ç —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", meals: [.supper], kind: .salad, ingredients: [.green, .shrimp, .tomato, .egg]),
  Dish(name: "–∫—É—Å—Ç–æ–¥–∏–µ–≤—Å–∫–∏–π —Å–∞–ª–∞—Ç", meals: [.supper], kind: .salad, ingredients: [.green, .cannedBeans, .sausage, .tomato, .rusk, .mayonnaise]),
  Dish(name: "–ø–µ–ª—å–º–µ–Ω–∏", meals: [.supper], kind: .none, ingredients: [.pelmeni]),
  Dish(name: "–≥–∞–≤–∞–π—Å–∫–∞—è —Å–º–µ—Å—å —Å —è–π—Ü–æ–º", meals: [.supper], kind: .none, ingredients: [.havaiiMix, .egg]),
  Dish(name: "—Ç–≤–æ—Ä–æ–≥ —Å –∑–µ–ª–µ–Ω—å—é", meals: [.supper], kind: .none, ingredients: [.cottageCheese, .cucumber, .dill]),
  Dish(name: "—Å—Ç–µ–π–∫", meals: [.supper], kind: .main, ingredients: [.stake]),
  Dish(name: "—Ä—ã–±–∞ –≤ –ø–∞–Ω–∏—Ä–æ–≤–∫–µ", meals: [.supper], kind: .main, ingredients: [.salmon, .green, .rusk, .butter]),
  Dish(name: "—Å–≤–∏–Ω–∏–Ω–∞ –ø–æ-–∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏", meals: [.supper], kind: .main, ingredients: [.pork, .flour, .ginger, .onion, .lemon, .soy]),
  Dish(name: "–ø–µ–Ω–Ω–æ–Ω–∏ —Å –æ–≤–æ—â–∞–º–∏", meals: [.supper], kind: .none, ingredients: [.pasta, .squash, .sweetRedPepper, .eggplant, .garlic, .pesto]),
  Dish(name: "–≥—Ä–∞—Ç–µ–Ω –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã", meals: [.supper], kind: .main, ingredients: [.cauliflower, .cheese, .milk, .butter, .dijonMustard]),
  Dish(name: "–ª–æ—Å–æ—Å—å –≤ –ø–µ—Ä–≥–∞–º–µ–Ω—Ç–µ", meals: [.supper], kind: .main, ingredients: [.salmon, .spinach, .onion, .sourCream]),
  Dish(name: "–æ–ª–∞–¥—å–∏ –∏–∑ —Ü—É–∫–∏–Ω–∏", meals: [.supper], kind: .main, ingredients: [.squash, .pumpkin, .sweetRedPepper, .green, .flour]),
  Dish(name: "—Ñ—É–Ω—á–æ–∑–∞ —Å –æ–≤—â–∞–º–∏", meals: [.supper], kind: .main, ingredients: [.carrot, .sweetRedPepper, .garlic, .soy, .green, .cucumber]),
  Dish(name: "–∫—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã", meals: [.supper], kind: .main, ingredients: [.chicken, .squash, .garlic, .dill, .green, .celery, .cranberry]),
]

enum Weekday: Int, CaseIterable, CustomStringConvertible {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday

  static func day(before: Weekday) -> Weekday {
    if before == .monday { return .sunday }
    return Weekday(rawValue: before.rawValue - 1)!
  }

  static let weekend: [Weekday] = [.saturday, .sunday]

  var description: String {
    switch self {
    case .monday: return "–ü–Ω"
    case .tuesday: return "–í—Ç"
    case .wednesday: return "–°—Ä"
    case .thursday: return "–ß—Ç"
    case .friday: return "–ü—Ç"
    case .saturday: return "–°–±"
    case .sunday: return "–í—Å"
    }
  }
}

enum DaylyMenu: CustomStringConvertible {
  struct Regular: CustomStringConvertible {
    let breakfast: Dish
    let dinner: Dish
    let supper: Dish

    var dishes: [Dish] {
      [breakfast, dinner, supper]
    }

    var description: String {
      dishes.map { " - \($0)" }.joined(separator: "\n")
    }

    var items: [Dish.Item] {
      dishes.map { Array($0.items) }.flatMap { $0 }
    }

    var ingredients: Set<Dish.Ingredient> {
      dishes.map { $0.ingredients }
        .reduce([]) { $0.union($1) }
    }

    func hasDish(of kind: Dish.Kind) -> Bool {
      dishes.contains { $0.kind == kind }
    }
  }

  case regular(Regular)
  case free

  var dishes: [Dish] {
    value?.dishes ?? []
  }

  var description: String {
    value?.description ?? "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å (–¥–æ–µ–¥–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏)"
  }

  var value: Regular? {
    switch self {
    case let .regular(value):
      return value
    case .free:
      return nil
    }
  }

  var items: [Dish.Item] {
    value.map { Array($0.items) } ?? []
  }

  var ingredients: Set<Dish.Ingredient> {
    value?.ingredients ?? []
  }

  func hasDish(of kind: Dish.Kind) -> Bool {
    value?.hasDish(of: kind) ?? false
  }
}

struct WeeklyMenu: CustomStringConvertible {
  let monday: DaylyMenu
  let tuesday: DaylyMenu
  let wednesday: DaylyMenu
  let thursday: DaylyMenu
  let friday: DaylyMenu
  let saturday: DaylyMenu
  let sunday: DaylyMenu

  init?(dict: [Weekday: DaylyMenu]) {
    guard
      let monday = dict[.monday],
      let tuesday = dict[.tuesday],
      let wednesday = dict[.wednesday],
      let thursday = dict[.thursday],
      let friday = dict[.friday],
      let saturday = dict[.saturday],
      let sunday = dict[.sunday]
    else {
      return nil
    }

    self.monday = monday
    self.tuesday = tuesday
    self.wednesday = wednesday
    self.thursday = thursday
    self.friday = friday
    self.saturday = saturday
    self.sunday = sunday
  }

  var menus: [DaylyMenu] {
    [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
  }

  var dishes: [Dish] {
    menus
      .map { $0.dishes }
      .flatMap { $0 }
  }

  var description: String {
    let ss: [[CustomStringConvertible]] = zip(
      Weekday.allCases,
      menus
    ).map { (weekday, daylyMenu) in [weekday, daylyMenu] }
    return ss.reduce([], +)
      .map { $0.description }
      .joined(separator: "\n")
  }

  var items: [Dish.Item] {
    menus.map { $0.items }.flatMap({ $0 })
  }

  var ingredients: Set<Dish.Ingredient> {
    menus
      .map { $0.ingredients }
      .reduce([]) { $0.union($1) }
  }
}

enum MenuGenerationError: Error {
  case notEnoughBreakfast
  case notEnoughDinner
  case notEnoughSupper
}

extension WeeklyMenu {
  //  1. –í—ã–≤–æ–¥–∏—Ç—å —Å—É–ø –Ω–∞ –æ–±–µ–¥ 2 –¥–Ω—è –ø–æ–¥—Ä—è–¥
  //  2. 1 –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–≥–∞–Ω—Å–∫–∏–º
  //  3. –í—ã–≤–æ–¥–∏—Ç—å cottageCheese, rice, egg, grecha, salmon, pork 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
  //  4. –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞—à–∏ 2 –¥–Ω—è –ø–æ–¥—Ä—è–¥
  //  5. –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å
  //  6. –õ—é–±–æ–µ –±–ª—é–¥–æ, –∫—Ä–æ–º–µ —Å—É–ø–∞, –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é

  static func make(
    dishes: [Dish],
    mondayDinner: Dish?,
    seed: UInt64?
  ) throws -> WeeklyMenu {
    let seed = seed ?? UInt64.random(in: UInt64.min...UInt64.max)
    print("Using seed: \(seed)")
    var generator = SeededGenerator(seed: seed)

    var menu = [Weekday: DaylyMenu]()
    let freeday = Weekday.weekend.randomElement(using: &generator)!
    let vegetarianday = Weekday.allCases
      .filter { ![Weekday.monday, freeday].contains($0) }.randomElement(using: &generator)!

    var usedDishes = Set<Dish>()
    try Weekday.allCases.forEach { today in
      let yesterday = Weekday.day(before: today)
      let dayBeforeYesterday = Weekday.day(before: yesterday)
      let yesterdayMenu = menu[yesterday]
      let dayBeforeYesterdayMenu = menu[dayBeforeYesterday]

      let yesterdayWasPorrige = yesterdayMenu?.hasDish(of: .porridge) ?? false
      let notUsedDishes = dishes.not(in: usedDishes)
      let availableDishes = yesterdayWasPorrige
        ? notUsedDishes.notPorridge
        : notUsedDishes

      let yesterdayWasSoup = yesterdayMenu?.hasDish(of: .soup) ?? false
      let dayBeforeYesterdayWasSoup = dayBeforeYesterdayMenu?.hasDish(of: .soup) ?? false

      let yesterdaySoup = (yesterdayWasSoup && !dayBeforeYesterdayWasSoup)
        ? yesterdayMenu?.value?.dinner : nil

      let option: DinnerOption
      if let mondayDinner = mondayDinner, today == .monday {
        option = .mondayDinner(mondayDinner)
      } else if let yesterdaySoup = yesterdaySoup {
        option = .yesterday(yesterdaySoup)
      } else {
        option = .fromScratch
      }

      let todayMenu: DaylyMenu
      if today == freeday {
        todayMenu = .free
      } else if today == vegetarianday {
        todayMenu = try availableDishes.vegetarian.makeRegularMenuForADay(
          option,
          generator: &generator
        )
      } else {
        todayMenu = try availableDishes.makeRegularMenuForADay(
          option,
          generator: &generator
        )
      }
      menu[today] = todayMenu
      usedDishes = usedDishes.union(todayMenu.dishes)
    }
    return WeeklyMenu(dict: menu)!
  }
}

enum DinnerOption {
  case yesterday(Dish)
  case mondayDinner(Dish)
  case fromScratch
}

extension Array where Element == Dish {
  var vegetarian: Self { filter { $0.isVegetarian } }
  var notPorridge: Self { filter { $0.kind == nil || $0.kind != .porridge } }
  func not(in used: Set<Dish>) -> Self { filter { !used.contains($0) } }

  func makeRegularMenuForADay(
    _ dinnerOption: DinnerOption,
    generator: inout SeededGenerator
  ) throws -> DaylyMenu {
    let onceADay: [Dish.Ingredient] = [.rice, .egg, .grecha, .salmon, .cottageCheese, .pork]
    let breakfasts = filter({ $0.meals.contains(.breakfast) })
    guard let breakfast = breakfasts
            .randomElement(using: &generator) else {
      throw MenuGenerationError.notEnoughBreakfast
    }
    let dinner: Dish
    switch dinnerOption {
    case let .yesterday(yesterday):
      dinner = yesterday
    case let .mondayDinner(mondayDinner):
      dinner = mondayDinner
    case .fromScratch:
      if let today = not(in: [breakfast])
          .filter({ $0.meals.contains(.dinner) })
          .filter({ $0.ingredients.isDisjoint(with: breakfast.ingredients.intersection(onceADay)) })
          .randomElement(using: &generator) {
        dinner = today
      } else {
        throw MenuGenerationError.notEnoughDinner
      }
    }
    let breakfastAndDinner = breakfast.ingredients.union(dinner.ingredients)
    guard let supper = not(in: [breakfast, dinner])
            .filter({ $0.meals.contains(.supper) })
            .filter({ $0.ingredients.isDisjoint(with: breakfastAndDinner.intersection(onceADay)) })
            .randomElement(using: &generator) else {
      throw MenuGenerationError.notEnoughSupper
    }

    return DaylyMenu.regular(.init(breakfast: breakfast, dinner: dinner, supper: supper))
  }
}

do {
  let bannedDishes = [
    "–≥—Ä–∏–±–Ω–æ–π —Å—É–ø",
    "–∫—É—Å—Ç–æ–¥–∏–µ–≤—Å–∫–∏–π —Å–∞–ª–∞—Ç",
    "–ø–µ–ª—å–º–µ–Ω–∏",
    "–≥—Ä–∞—Ç–µ–Ω –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã",
    "–≥–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø",
    "—Å–≤–∏–Ω–∏–Ω–∞ –ø–æ-–∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏",
    "—Å–∞–ª–∞—Ç —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
    "–∑–∞–ø–µ—á—ë–Ω–Ω–∞—è –∫–ª—É–Ω—å–∫–∞",
    "—à–∞–≤–µ—Ä–º–∞",
    "—Å—É–ø –∏–∑ –∏–Ω–¥–µ–π–∫–∏",
    "–º—è—Å–æ –∑–∞–ø–µ—á—ë–Ω–Ω–æ–µ",
    "–º—è—Å–æ –ø–æ-—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏",
    "–∫–∞—Ä—Ç–æ—à–∫–∞ –∑–∞–ø–µ—á–µ–Ω–æ-–≤–∞—Ä–µ–Ω–∞—è",
  ].map { name in favoritesDishes.first { $0.name == name }! }

  let menu = try WeeklyMenu.make(
    dishes: favoritesDishes.not(in: Set(bannedDishes)),
    mondayDinner: nil,
    seed: nil
  )
  print(menu)
  print("–í—Å–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã:")
  menu.items.sorted().compacted().forEach { print("\($0)") }
} catch {
  print("–û—à–∏–±–∫–∞: \(error).")
}


extension Array where Element == Dish.Item {
  func compacted() -> Self {
    var result = Self()
    forEach { curr in
      if let prev = result.last,
         prev.ingredient == curr.ingredient,
         prev.value.unit == curr.value.unit {
        result[result.index(before: result.endIndex)] = Dish.Item(
          ingredient: curr.ingredient,
          value: Dish.Value(
            quantity: prev.value.quantity + curr.value.quantity,
            unit: curr.value.unit
          )
        )
      } else {
        result.append(curr)
      }
    }
    return result
  }
}
